import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { texto } = await req.json();

    if (!texto || typeof texto !== 'string' || texto.trim().length === 0) {
      return new Response(
        JSON.stringify({ erro: 'Texto n√£o fornecido ou inv√°lido' }), 
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada');
      return new Response(
        JSON.stringify({ erro: 'Chave API OpenAI n√£o configurada' }), 
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    console.log('üîç Corrigindo gram√°tica do texto:', texto.substring(0, 100) + '...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um assistente especializado em corre√ß√£o gramatical e concord√¢ncia para relat√≥rios de ocorr√™ncias de bombeiros em aeroportos.

INSTRU√á√ïES IMPORTANTES:
1. Corrija APENAS gram√°tica, concord√¢ncia verbal e nominal, pontua√ß√£o e ortografia
2. PRESERVE COMPLETAMENTE todos os termos t√©cnicos, c√≥digos, siglas, equipamentos espec√≠ficos do aeroporto
3. MANTENHA o tom formal e t√©cnico do texto original
4. N√ÉO altere n√∫meros, hor√°rios, localiza√ß√µes espec√≠ficas ou nomenclaturas t√©cnicas
5. N√ÉO adicione ou remova informa√ß√µes, apenas corrija a forma de escrev√™-las
6. Se houver termos em mai√∫sculo (c√≥digos/siglas), mantenha em mai√∫sculo
7. Preserve a estrutura e o sentido t√©cnico original

Retorne APENAS o texto corrigido, sem explica√ß√µes ou coment√°rios adicionais.`
          },
          {
            role: 'user',
            content: `Corrija a gram√°tica e concord√¢ncia do seguinte texto de ocorr√™ncia aeroportu√°ria:\n\n${texto}`
          }
        ],
        max_tokens: 1000,
        temperature: 0.1
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erro OpenAI:', response.status, errorData);
      throw new Error(`Erro OpenAI: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    const textoCorrigido = data.choices[0].message.content.trim();

    console.log('‚úÖ Texto corrigido com sucesso');
    console.log('üìù Original:', texto.substring(0, 50) + '...');
    console.log('üìù Corrigido:', textoCorrigido.substring(0, 50) + '...');

    return new Response(
      JSON.stringify({ 
        textoOriginal: texto,
        textoCorrigido: textoCorrigido,
        alterado: texto !== textoCorrigido
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o gramatical:', error);
    return new Response(
      JSON.stringify({ 
        erro: 'Erro interno do servidor', 
        detalhes: error.message 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});